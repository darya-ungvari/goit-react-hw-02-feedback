{"version":3,"sources":["Components/FeedbackCounter/FeedbackCounter.module.css","Components/ControlFeedback/ControlFeedback.module.css","Components/Section/Section.module.css","Components/ControlFeedback/ControlFeedback.jsx","Components/FeedbackCounter/FeedbackCounter.jsx","Components/Section/Section.jsx","App.js","reportWebVitals.js","index.js"],"names":["module","exports","ControlFeedback","myClick","name","className","s","li","onClick","FeedbackCounter","good","bad","neutral","totalValue","percentage","positivePercentage","Math","round","Section","props","section","children","App","state","handleGoodIncrement","console","log","setState","handleBadIncrement","handleNeutralIncrement","this","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+HACAA,EAAOC,QAAU,CAAC,WAAa,oCAAoC,mBAAqB,8C,oBCAxFD,EAAOC,QAAU,CAAC,iBAAmB,0CAA0C,GAAK,8B,gBCApFD,EAAOC,QAAU,CAAC,QAAU,2B,gMCWbC,EARS,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,QAASC,EAAW,EAAXA,KAChC,OACQ,oBAAIC,UAAWC,IAAEC,GAAjB,SACI,wBAAQC,QAASL,EAAjB,SAA2BC,O,gBCS5BK,EAbS,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,KAAMC,EAAmB,EAAnBA,IAAKC,EAAc,EAAdA,QAC9BC,EAAaH,EAAOE,EAAUD,EAC9B,OACI,qCACI,uBAAMN,UAAWC,IAAEQ,WAAnB,mBAAsCJ,KACtC,uBAAML,UAAWC,IAAEQ,WAAnB,sBAAyCF,KACzC,uBAAMP,UAAWC,IAAEQ,WAAnB,kBAAqCH,KACrC,uBAAMN,UAAWC,IAAES,mBAAnB,kCAA4E,IAAfF,EAAmB,IAAMG,KAAKC,MAAa,IAAPP,EAAaG,U,gBCF/GK,EANC,SAACC,GACb,OACI,qBAAKd,UAAWC,IAAEc,QAAlB,SAA4BD,EAAME,YC2D3BC,E,4MAtDbC,MAAQ,CACNb,KAAM,EACNE,QAAS,EACTD,IAAK,G,EAMPa,oBAAsB,WACpBC,QAAQC,IAAI,YACZ,EAAKC,SAAS,CACVjB,KAAM,EAAKa,MAAMb,KAAO,K,EAOhCkB,mBAAqB,WACnBH,QAAQC,IAAI,OACZ,EAAKC,SAAS,CACVhB,IAAK,EAAKY,MAAMZ,IAAM,K,EAI5BkB,uBAAyB,WACvBJ,QAAQC,IAAI,WACZ,EAAKC,SAAS,CACVf,QAAS,EAAKW,MAAMX,QAAU,K,4CAKnC,WACC,OACE,eAAC,EAAD,WACE,+BACE,cAAC,EAAD,CAAiBR,KAAK,OAAOD,QAAS2B,KAAKN,sBAC3C,cAAC,EAAD,CAAiBpB,KAAK,UAAUD,QAAS2B,KAAKD,yBAC9C,cAAC,EAAD,CAAiBzB,KAAK,MAAMD,QAAS2B,KAAKF,wBAE5C,cAAC,EAAD,CACAlB,KAAMoB,KAAKP,MAAMb,KACjBC,IAAKmB,KAAKP,MAAMZ,IAChBC,QAASkB,KAAKP,MAAMX,iB,GA/CRmB,IAAMC,WCKTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.94c3ee0c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"percentage\":\"FeedbackCounter_percentage__7TwEp\",\"positivePercentage\":\"FeedbackCounter_positivePercentage__13iB1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttonsContainer\":\"ControlFeedback_buttonsContainer__30BS5\",\"li\":\"ControlFeedback_li__3n3kL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"section\":\"Section_section__Q33dy\"};","import React from 'react';\r\n\r\nimport s from './ControlFeedback.module.css'\r\n\r\nconst ControlFeedback = ({ myClick, name }) => {\r\n    return(       \r\n            <li className={s.li}>\r\n                <button onClick={myClick}>{name}</button>\r\n            </li>\r\n    )\r\n}\r\n\r\nexport default ControlFeedback;","import React from 'react';\r\nimport s from './FeedbackCounter.module.css'\r\n\r\nconst FeedbackCounter = ({ good, bad, neutral }) => {\r\n    let totalValue = good + neutral + bad;\r\n        return(\r\n            <>\r\n                <span className={s.percentage}>Good: {good}</span>\r\n                <span className={s.percentage}>Neutral: {neutral}</span>\r\n                <span className={s.percentage}>Bad: {bad}</span>\r\n                <span className={s.positivePercentage}>Positive percentage: {totalValue === 0 ? '0' : Math.round(good * 100 / totalValue)}</span>\r\n            </>\r\n        )\r\n    \r\n}\r\n\r\nexport default FeedbackCounter;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import s from './Section.module.css'\r\n\r\nconst Section = (props) => {\r\n    return(\r\n        <div className={s.section}>{props.children}</div>\r\n    )\r\n}\r\n\r\nexport default Section;","import React from 'react';\n\nimport './App.css';\nimport ControlFeedback from './Components/ControlFeedback/ControlFeedback';\nimport FeedbackCounter from './Components/FeedbackCounter/FeedbackCounter';\nimport Section from './Components/Section/Section'\n\nclass App extends React.Component {\n\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n\n\n\n  handleGoodIncrement = () => {\n    console.log('positive')\n    this.setState({\n        good: this.state.good + 1,\n    });\n}\n\n\n\n\nhandleBadIncrement = () => {\n  console.log('bad')\n  this.setState({\n      bad: this.state.bad + 1,\n  });\n}\n\nhandleNeutralIncrement = () => {\n  console.log('neutral')\n  this.setState({\n      neutral: this.state.neutral + 1,\n      \n  });\n}\n\n render(){\n  return (\n    <Section>\n      <ul>\n        <ControlFeedback name='Good' myClick={this.handleGoodIncrement}/>\n        <ControlFeedback name='Neutral' myClick={this.handleNeutralIncrement}/>\n        <ControlFeedback name='Bad' myClick={this.handleBadIncrement}/>\n      </ul>\n      <FeedbackCounter \n      good={this.state.good}\n      bad={this.state.bad}\n      neutral={this.state.neutral}\n      >\n      </FeedbackCounter>\n    </Section>\n  );\n }\n  \n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport 'modern-normalize/modern-normalize.css';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}